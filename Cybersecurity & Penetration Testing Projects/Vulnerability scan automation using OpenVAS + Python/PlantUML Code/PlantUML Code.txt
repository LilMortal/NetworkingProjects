@startuml Vulnerability_Scan_Automation_OpenVAS_Python

skinparam backgroundColor #FFFFFF
skinparam componentStyle rectangle
skinparam rectangle {
  BackgroundColor<<Automation>> #D0E8F2
  BackgroundColor<<Scanner>> #F9F1C8
  BackgroundColor<<Data>> #FADBD8
  BackgroundColor<<Reporting>> #C8E6C9
  BackgroundColor<<Administration>> #FBE4E6
  BorderColor Black
}

title Vulnerability Scan Automation using OpenVAS + Python

actor "Security Engineer" as Engineer

package "Automation & Orchestration" <<Automation>> {
  component "Python Automation Script\n- Controls scan lifecycle\n- Interfaces with OpenVAS API" as PythonScript
  component "Scheduler\n- Schedules regular vulnerability scans" as Scheduler
}

package "Scanning Engine" <<Scanner>> {
  component "OpenVAS Scanner\n- Performs vulnerability scans" as OpenVAS
  component "OpenVAS Manager\n- Manages scan tasks and results" as OpenVASManager
  component "Target Hosts\n- Network devices and servers to scan" as Targets
}

package "Data Storage & Analysis" <<Data>> {
  component "Vulnerability Database\n- Stores known vulnerabilities" as VulnDB
  component "Scan Results Repository\n- Stores scan data and reports" as ScanRepo
}

package "Reporting & Notification" <<Reporting>> {
  component "Report Generator\n- Formats scan data into reports" as ReportGen
  component "Notification System\n- Sends alerts and reports to stakeholders" as Notifier
}

package "Administration" <<Administration>> {
  component "Admin Dashboard\n- Configure scan settings and view results" as AdminDashboard
}

Engineer --> AdminDashboard : Configure scan parameters
AdminDashboard --> Scheduler : Set scan schedules
Scheduler --> PythonScript : Trigger scan automation

PythonScript --> OpenVASManager : Create and launch scan tasks
OpenVASManager --> OpenVAS : Execute scans on targets
OpenVAS --> Targets : Scan network hosts

OpenVASManager --> ScanRepo : Store raw scan results
PythonScript --> VulnDB : Cross-check vulnerabilities
PythonScript --> ScanRepo : Fetch previous scan data for comparison

PythonScript --> ReportGen : Request formatted reports
ReportGen --> Notifier : Send reports and alerts
Notifier --> Engineer : Deliver scan summaries and alerts

AdminDashboard --> ScanRepo : View historical scan data
AdminDashboard --> ReportGen : Generate on-demand reports

note right of PythonScript
- Automates scan task creation, execution, and result fetching
- Integrates with OpenVAS API
- Compares current and past scan results to track changes
end note

note right of OpenVAS
- Open-source vulnerability scanner
- Performs deep network and host vulnerability assessment
end note

note right of ReportGen
- Generates PDF/HTML reports
- Highlights critical vulnerabilities and remediation steps
end note

@enduml
